# C S 153 - Python Programming
# Documentation for Custom Tikinter:  https://customtkinter.tomschimansky.com/documentation/

import os
import datetime # for data entries
import customtkinter as ctk     # If you get a crash error, please make sure that you're on Python 3.11 and have installed
                                # In your command prompt put in: pip install customtkinter

# initalize global variables to grab information from the functions
# pull the timestamp out of the functions so that everything saves in one format
# log the time stamp when program is terminated/logged out

moodEntry = {}
foodEntry = {}
waterEntry = {}
sleepEntry = {}
exerciseEntry = {}
journalEntry = {}
entryTimestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")


'''
#___Shabhan's__Login()_________________________________
logFile = "login.txt"
regFile = "register.txt"
 
def write_file(name):
    try:
        with open(name, 'w') as f:
            user = input("Enter username: ")
            pw = input("Enter password: ")
            f.write(f"{user}\n{pw}")                                   #writes username & password to file
 
    except IOError:
        print("Permission denied")
    except Exception as e:
        print(f"Error: {e}")
 
 
def read_file(name):
    try:
        with open(name, 'r') as f:
            return f.read().strip().split('\n')  			            #reads each line separate, returns a list
 
    except FileNotFoundError:
        print(f"File {filename} not found")
    except IOError:
        print(f"You don't have permission to read {filename}")
    except Exception as e:
        print(f"Error: {e}")
    return None
 
def check_info(log, reg):
    return log== reg
 
# Main loop
logged_in = False
while not logged_in:
    write_file(log_file)
    log_info = read_file(logFile)
    reg_info = read_file(regFile)
    
    if log_info and reg_info:
        if check_info(log_info, reg_info):
            logged_in = True
            print("Login successful")
        else:
            print("Wrong info")
    else:
        print("enter login")
#_______________________________________________________#

displayDashBoard()
    display tracker buttons (mood, food, water, sleep, exercise)
    display timeline switch buttons
    display bar graph for percentage of daily goals met
    display mood journal option
    display analytics button
    display saveButton

    while continueProgram == True
        match buttonInput
            case "Mood":
                trackMood()
            case "Food":
                trackFood()
            case "Water":
                trackWater()
            case "Sleep":
                trackSleep()
            case "Exercise":
                trackExercise()
            case "Analytics":
                displayAnalyticsWindow()
            case "Save":
                saveDailyProgress()
                Display message "Progress saved successfully."
            case "Journal":
                openMoodJournal()
            case "Logout":
                saveDailyProgress()
                logout()
                continueProgram = False
            case _:
                display error message


# Double check for later
trackMood()
    Prompt user to enter mood on a scale of 1-5
    If valid, store mood entry with timestamp
    Display confirmation "Mood logged successfully."
    display mood jounral option button

trackFood()
    def array_operations(food):
    print("food:", foods)
foods = ['carrots, yogurt, broccoli, eggs, avacado, berries, nuts, oatmeal']
array_operations(foods)
    # If valid, store food entry with timestamp
    # Display confirmation "Food intake logged successfully."

trackWater()
    Prompt user to enter water intake in liters
    If input >= 2.7 liters, mark water goal as achieved
    Store water entry with timestamp
    Display confirmation "Water intake logged successfully."


#__William's__Water_tracker_____________________________________________________#
# still work in progress
water=float(input("aproximatly how many liters of water have you drank today"))
if water > 2.7:
  print("You have drunk the required amount for today")
elif water < 2.7:
    print("drink some more water")
else:
  print("You have drunk the required amount for today")
#_______________________________________________________________________________#
trackSleep()
    Prompt user to enter hours of sleep (0-10 hours)
    If input is between 6 and 8 hours, mark sleep goal as achieved
    Store sleep entry with timestamp
    Display confirmation "Sleep logged successfully."

trackExercise()
    Prompt user to select exercise type (Cardio, Yoga, Weights, Sports/Recreation, Walking)
    Prompt user to enter exercise duration in minutes
    If duration >= 30, mark exercise goal as achieved
    Store exercise entry with timestamp
    Display confirmation "Good job! Exercise was logged."

openMoodJournal()
    Prompt user to enter a journal entry
    Validate entry (ensure it’s not empty)
    If valid, store journal entry with timestamp
    Display confirmation "Journal entry saved successfully."

#___William's_openMoodJournal()________________________________
# still work in progress
ent=input("input a jounal entry")
if not ent:
    print("Input is empty")
else:
    print("Journal entry saved successfully.")
#______________________________________________________________

showProgressChart()
    Calculate progress based on entries (Mood, Food, Water, Sleep, Exercise)
    Generate and display bar chart with progress towards daily goals
    Generate a tip based on the score for the week

saveDailyProgress()
    Save all daily entries (Mood, Food, Water, Sleep, Exercise) to local storage
    Display message "Daily progress saved successfully."

logout()
    Clear user session data
    Display logout confirmation message "You have successfully logged out."

End Pseudo Code
'''

#_Start_HeadSynk_______________________________________________

# Side Notes:
#   We might need to make a user class, so that we can populate things when the user wants them
# or, we can just load the sections after they click on them for more complex stuff (i.e analytics)

# Starts the program with a user login
def doLogIn():
    return  # DELETE ME: Remove when doLogIn() is complete
    logFile = "login.txt"
    regFile = "register.txt"
    
    def write_file(name):
        try:
            with open(name, 'w') as f:
                user = input("Enter username: ")
                pw = input("Enter password: ")
                f.write(f"{user}\n{pw}")                                   #writes username & password to file
    
        except IOError:
            print("Permission denied")
        except Exception as e:
            print(f"Error: {e}")
    
    
    def read_file(name):
        try:
            with open(name, 'r') as f:
                return f.read().strip().split('\n')  			#reads each line separate, returns a list
    
        except FileNotFoundError:
            print(f"File {name} not found")
        except IOError:
            print(f"You don't have permission to read {name}")
        except Exception as e:
            print(f"Error: {e}")
        return None
    
    def check_info(log, reg):
        return log== reg
    
    # Main loop
    logged_in = False
    while not logged_in:
        write_file(logFile)
        log_info = read_file(logFile)
        reg_info = read_file(regFile)
        if log_info and reg_info:
            if check_info(log_info, reg_info):
                logged_in = True
                print("Login successful")
            else:
                print("Wrong info")
        else:
            print("access denied")


# The main dashboard menu/window loop
# Start Dashboard Loop
def displayDashboard():
    continueProgram = True

    while continueProgram == True:
        # DELETE ME: This print function will be changed to a window loop
        print("""Please input an option:
              1) Mood Tracker
              2) Food Tracker
              3) Water Tracker
              4) Sleep Tracker
              5) Exercise Tracker
              6) See Analytics
              7) Save Daily Progress
              8) Journal
              0) Log Out
              """)
        
        buttonInput = input("Input: ") # FIX ME: This will change to a button input
        match buttonInput:
            case "1":   # Mood
                trackMood()
            case "2":   # Food
                trackFood()
            case "3":   # Water
                trackWater()
            case "4":   # Sleep
                trackSleep()
            case "5":   # Exercise
                trackExercise()
            case "6":   # Analytics Window
                doBadgeSystem()
            case "7":   # Save Function
                saveDailyProgress()
            case "8":   # Journal
                openMoodJournal()
            case "0":   # Log Out
                saveDailyProgress()
                continueProgram = logout()
            case _:     # Default case
                # FINISH ME:
                # In development part 2, turn this into a pop up window.
                print("An error has occured. Please Try again.")

    print("Goodbye!")
# End Dashboard Loop

# Start trackMood
def trackMood():
    moodTrack=int(input("On a scale of 1-5 how well are you feeling today 1 being bad 5 being really good."))
    if moodTrack > 5:
        print("That is not on the scale")
    elif moodTrack < 3:
        print("Things will get better")
        goalAchieved = True
    else:
        print("Thats great.")
        goalAchieved = True

    # Get timestamp for entry
    timeStamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Create entry based off of data using a dictionary
    moodMood = {
        "moodTracked": moodTrack,
        "goalAchieved": goalAchieved,
        "timeStamp": timeStamp
    }
# End trackMood

# Start Track Food
#__Raena's__Food_tracker_________________________________________
def trackFood():
    # FINISH ME:
    def array_operations(food_list):
        for item in food_list:
            print("Food item:", item)
    
    foods = ['carrots', 'yogurt', 'broccoli', 'eggs', 'avocado', 'berries', 'nuts', 'oatmeal']
    array_operations(foods)

    # If valid, store food entry with timestamp
    # Display confirmation "Food intake logged successfully."
    ''' # Zac: Idea for timestamp
    foodEntry = {
        "foods": foods,
        "timeStamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    '''
# End Track Food
#_______________________________________________________________

# Start Water Tracker
def trackWater():
    waterAmount = float(input("Aproximatly how many liters of water have you drank today? (Enter your amount in liters): "))
    if waterAmount > 2.7:
        print("You have drank the required amount for today")
        goalAchieved = True
    else:
        print("You should drink some more water")
        goalAchieved = False

    # Get timestamp for entry
    timeStamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")


    global waterEntry
    # Create entry based off of data using a dictionary
    waterEntry = {
        "waterAmount": waterAmount,
        "goalAchieved": goalAchieved,
        "timeStamp": timeStamp
    }
# End Water Tracker

# Start Track Sleep
def trackSleep():
    def saveSleep():
        # gets sleep hours 
        global sleepEntry
        sliderValue = int(slider.get())

        # if sleep is greater than 7, then the goal has been achieved
        if sliderValue > 7:
            goalAchieved = True
        else:
            goalAchieved = False

        # Saves it to the sleepEntry dictionary
        sleepEntry = {"sleepAmount": sliderValue, "goalAchieved":goalAchieved}
        sleepWindow.destroy()

    def updateLabel():  # This is to make the number pop below the slider
        currentValue = int(slider.get())
        if currentValue > 9:
            sliderValueLabel.configure(text="SleepHours: 9+")
        else:
            sliderValueLabel.configure(text=f"SleepHours: {currentValue}")

    sleepWindow = ctk.CTkToplevel()
    sleepWindow.title("Sleep Tracker")
    sleepWindow.geometry("600x400")

    label = ctk.CTkLabel(sleepWindow, text="How many hours did you sleep last night?", font=("Aptos", 16))
    label.pack(side="top", pady = 20)

    slider = ctk.CTkSlider(sleepWindow, from_=0, to=10, number_of_steps=10, command=lambda x: updateLabel())
    slider.pack(pady=20)

    sliderValueLabel = ctk.CTkLabel(sleepWindow, text="SleepHours: 5", font=("Aptos", 14))
    sliderValueLabel.pack()

    saveButton = ctk.CTkButton(sleepWindow, text="Confirm", command=saveSleep)
    saveButton.pack(pady=20)

    sleepWindow.wait_window()
# End Track Sleep

# Start Track Exercise
def trackExercise():
    # DELETE ME: Temporary Menu until UI is implemented
    choice = int(input("""
    Slect the type of exercise:
    1) Cardio
    2) Yoga
    3) Weights
    4) Sports/Recreation
    5) Walking
    
    Please enter a choice: """))

    global exerciseEntry

    exerciseTypes = {1: "Cardio", 2: "Yoga", 3: "Weights", 4: "Sports/Recreation", 5: "Walking"}   # Creates a Dictionary to relate choice to exercise
    
    # Get duration from user input
    try:
        duration = int(input(f"Please enter a minute amount for the duration of {exerciseTypes[choice]} completed: "))
    except ValueError:
        # FINISH ME: Add an error window
        showErrorPopup("Invalid Input. Please enter amount of minutes for duration")
        return

    # Get duration for entry
    if duration >= 30:
        goalAchieved = True
    else:
        goalAchieved = False

    # Get timestamp for entry
    timeStamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Create entry based off of data using a dictionary
    exerciseEntry = {
        "exerciseType": exerciseTypes[choice],
        "duration": duration,
        "goalAchieved": goalAchieved,
        "timeStamp": timeStamp
    }

    print(f"Good job! Exercise was logged: {exerciseEntry}")
# End of Track Exercise

#__Shabhan's__Badge_System#_____________________________________
def doBadgeSystem():
    # FINISH ME:
    print("TEST: Analytics Window...")
    pass
#_______________________________________________________________

# Start Mood Journal
def openMoodJournal():
    def saveEntry():
        global journalEntry
        # dictionary to stay consistent
        journalEntry = {"journalEntry": textBox.get("1.0", "end-1c")}   # 1.0 gets the textBox entry at column 1,
                                                                        # row 1. end-1c removes any lines after the last character
        journalWindow.destroy()

    # Create a new window
    journalWindow = ctk.CTkToplevel()
    journalWindow.title("Mood Journal")
    journalWindow.geometry("600x400")

    # Add a label to the top of the window
    label = ctk.CTkLabel(journalWindow, text="Please write anything you'd like to remember from today!\nPlease make sure to press 'save' before exiting.", font=("Aptos", 16))
    label.pack(side="top", pady = 20)

    # Add a text box for multi-line input
    textBox = ctk.CTkTextbox(journalWindow, width=380, height=200)
    textBox.pack(pady=10)

    # Add a save button
    saveButton = ctk.CTkButton(journalWindow, text="Save", command=saveEntry)
    saveButton.pack(pady=10)

    journalWindow.wait_window()
# End Mood Journal

def saveDailyProgress():
    # FINISH ME:
    print("TEST: Progress Saved!")
    pass

#___Shabhan's__Logout()_________________________________
def logout():
    try:                                                                         
        with open(log_file, 'w') as f:                                 # write mode, which clears its contents
            pass                                                              # just clear the file
        print("Logged out successfully.")
    except IOError:
        print("Permission denied ")
    except Exception as e:
        print(f"Error : {e}")
    
#_______________________________________________________#

# Start Error Window
def showErrorPopup(errorMessage):
    
    errorWindow = ctk.CTkToplevel() # FIX ME: put in the main window varibale name here
    errorWindow.title("⚠️ Error")
    errorWindow.geometry("250x120")
    errorWindow.grab_set()

    label = ctk.CTkLabel(errorWindow, text=f"⚠️{errorMessage}", wraplength=250, font=("Aptos", 12), text_color="red")
    label.pack(pady=20)

    closeButton = ctk.CTkButton(errorWindow, text="Dismiss", command=errorWindow.destroy)
    closeButton.pack(pady=10)
    
    errorWindow.wait_window()
# End Error Window

# main "function" basically
if __name__ == "__main__":
    doLogIn()
    displayDashboard()
    print(exerciseEntry)
    print(foodEntry)
    print(sleepEntry)
    print(moodEntry)
    print(waterEntry)
    print(journalEntry)
