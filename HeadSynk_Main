# C S 153 - Python Programming
# Documentation for Custom Tikinter:  https://customtkinter.tomschimansky.com/documentation/

import os
import datetime # for data entries
import customtkinter as ctk     # If you get a crash error, please make sure that you're on Python 3.11 and have installed
                                # In your command prompt put in: pip install customtkinter

'''
#___Shabhan's__Login()_________________________________
logFile = "login.txt"
regFile = "register.txt"
 
def write_file(name):
    try:
        with open(name, 'w') as f:
            user = input("Enter username: ")
            pw = input("Enter password: ")
            f.write(f"{user}\n{pw}")                                   #writes username & password to file
 
    except IOError:
        print("Permission denied")
    except Exception as e:
        print(f"Error: {e}")
 
 
def read_file(name):
    try:
        with open(name, 'r') as f:
            return f.read().strip().split('\n')  			            #reads each line separate, returns a list
 
    except FileNotFoundError:
        print(f"File {filename} not found")
    except IOError:
        print(f"You don't have permission to read {filename}")
    except Exception as e:
        print(f"Error: {e}")
    return None
 
def check_info(log, reg):
    return log== reg
 
# Main loop
logged_in = False
while not logged_in:
    write_file(log_file)
    log_info = read_file(logFile)
    reg_info = read_file(regFile)
    
    if log_info and reg_info:
        if check_info(log_info, reg_info):
            logged_in = True
            print("Login successful")
        else:
            print("Wrong info")
    else:
        print("enter login")
#_______________________________________________________#

displayDashBoard()
    display tracker buttons (mood, food, water, sleep, exercise)
    display timeline switch buttons
    display bar graph for percentage of daily goals met
    display mood journal option
    display analytics button
    display saveButton

    while continueProgram == True
        match buttonInput
            case "Mood":
                trackMood()
            case "Food":
                trackFood()
            case "Water":
                trackWater()
            case "Sleep":
                trackSleep()
            case "Exercise":
                trackExercise()
            case "Analytics":
                displayAnalyticsWindow()
            case "Save":
                saveDailyProgress()
                Display message "Progress saved successfully."
            case "Journal":
                openMoodJournal()
            case "Logout":
                saveDailyProgress()
                logout()
                continueProgram = False
            case _:
                display error message


# Double check for later
trackMood()
    Prompt user to enter mood on a scale of 1-5
    If valid, store mood entry with timestamp
    Display confirmation "Mood logged successfully."
    display mood jounral option button

trackFood()
    def array_operations(food):
    print("food:", foods)
foods = ['carrots, yogurt, broccoli, eggs, avacado, berries, nuts, oatmeal']
array_operations(foods)
    # If valid, store food entry with timestamp
    # Display confirmation "Food intake logged successfully."

trackWater()
    Prompt user to enter water intake in liters
    If input >= 2.7 liters, mark water goal as achieved
    Store water entry with timestamp
    Display confirmation "Water intake logged successfully."


#__William's__Water_tracker_____________________________________________________#
# still work in progress
water=float(input("aproximatly how many liters of water have you drank today"))
if water > 2.7:
  print("You have drunk the required amount for today")
elif water < 2.7:
    print("drink some more water")
else:
  print("You have drunk the required amount for today")
#_______________________________________________________________________________#
trackSleep()
    Prompt user to enter hours of sleep (0-10 hours)
    If input is between 6 and 8 hours, mark sleep goal as achieved
    Store sleep entry with timestamp
    Display confirmation "Sleep logged successfully."

trackExercise()
    Prompt user to select exercise type (Cardio, Yoga, Weights, Sports/Recreation, Walking)
    Prompt user to enter exercise duration in minutes
    If duration >= 30, mark exercise goal as achieved
    Store exercise entry with timestamp
    Display confirmation "Good job! Exercise was logged."

openMoodJournal()
    Prompt user to enter a journal entry
    Validate entry (ensure itâ€™s not empty)
    If valid, store journal entry with timestamp
    Display confirmation "Journal entry saved successfully."

#___William's_openMoodJournal()________________________________
# still work in progress
ent=input("input a jounal entry")
if not ent:
    print("Input is empty")
else:
    print("Journal entry saved successfully.")
#______________________________________________________________

showProgressChart()
    Calculate progress based on entries (Mood, Food, Water, Sleep, Exercise)
    Generate and display bar chart with progress towards daily goals
    Generate a tip based on the score for the week

saveDailyProgress()
    Save all daily entries (Mood, Food, Water, Sleep, Exercise) to local storage
    Display message "Daily progress saved successfully."

logout()
    Clear user session data
    Display logout confirmation message "You have successfully logged out."

End Pseudo Code
'''

#_Start_HeadSynk_______________________________________________

# Side Notes:
#   We might need to make a user class, so that we can populate things when the user wants them
# or, we can just load the sections after they click on them for more complex stuff (i.e analytics)

# Starts the program with a user login
def doLogIn():
    return  # DELETE ME: Remove when doLogIn() is complete
    logFile = "login.txt"
    regFile = "register.txt"
    
    def write_file(name):
        try:
            with open(name, 'w') as f:
                user = input("Enter username: ")
                pw = input("Enter password: ")
                f.write(f"{user}\n{pw}")                                   #writes username & password to file
    
        except IOError:
            print("Permission denied")
        except Exception as e:
            print(f"Error: {e}")
    
    
    def read_file(name):
        try:
            with open(name, 'r') as f:
                return f.read().strip().split('\n')  			#reads each line separate, returns a list
    
        except FileNotFoundError:
            print(f"File {name} not found")
        except IOError:
            print(f"You don't have permission to read {name}")
        except Exception as e:
            print(f"Error: {e}")
        return None
    
    def check_info(log, reg):
        return log== reg
    
    # Main loop
    logged_in = False
    while not logged_in:
        write_file(logFile)
        log_info = read_file(logFile)
        reg_info = read_file(regFile)
        if log_info and reg_info:
            if check_info(log_info, reg_info):
                logged_in = True
                print("Login successful")
            else:
                print("Wrong info")
        else:
            print("access denied")


# The main dashboard menu/window loop
# Start Dashboard Loop
def displayDashboard():
    continueProgram = True

    while continueProgram == True:
        # DELETE ME: This print function will be changed to a window loop
        print("""Please input an option:
              1) Mood Tracker
              2) Food Tracker
              3) Water Tracker
              4) Sleep Tracker
              5) Exercise Tracker
              6) See Analytics
              7) Save Daily Progress
              8) Journal
              0) Log Out
              """)
        
        buttonInput = input("Input: ") # DELETE ME: This will change to a button input
        match buttonInput:
            case "1":   # Mood
                trackFood()
            case "2":   # Food
                trackFood()
            case "3":   # Water
                trackWater()
            case "4":   # Sleep
                trackSleep()
            case "5":   # Exercise
                trackExercise()
            case "6":   # Analytics Window
                displayAnalyticsWindow()
            case "7":   # Save Function
                saveDailyProgress()
            case "8":   # Journal
                openMoodJournal()
            case "0":   # Log Out
                saveDailyProgress()
                continueProgram = logout()
            case _:     # Default case
                # FINISH ME:
                # In development part 2, turn this into a pop up window.
                print("An error has occured. Please Try again.")

    print("Goodbye!")
# End Dashboard Loop

def trackMood():
    # FINISH ME:
    print("TEST: Mood Tracked!")
    pass

# Start Track Food
#__Raena's__Food_tracker_________________________________________
def trackFood():
    def array_operations(food_list):
        for item in food_list:
            print("Food item:", item)
    
    foods = ['carrots', 'yogurt', 'broccoli', 'eggs', 'avocado', 'berries', 'nuts', 'oatmeal']
    array_operations(foods)

    # If valid, store food entry with timestamp
    # Display confirmation "Food intake logged successfully."
    ''' # Zac: Idea for timestamp
    foodEntry = {
        "foods": foods,
        "timeStamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    '''
# End Track Food
#_______________________________________________________________

#__William's__Water_tracker____________________________________
# Zac: You might want to make it so that the data can be logged. All functionality will be
#  moved to buttons in Development Part 2. See trackExercise() for how to track data
def trackWater():
    # FINISH ME:
    # still work in progress
    water_amount=float(input("aproximatly how many liters of water have you drank today"))
    if water_amount > 2.7:
        print("You have drunk the required amount for today")
    elif water_amount < 2.7:
        print("drink some more water")
    else:
        print("You have drunk the required amount for today")
# Get timestamp for entry
    timeStamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Create entry based off of data using a dictionary
        "water_amount": water_amount,
        "timeStamp": timeStamp
#_______________________________________________________________

def trackSleep():
    # FINISH ME:
    print("TEST: Sleep Tracked!")
    pass

# Start Track Exercise
def trackExercise():
    # DELETE ME: Temporary Menu until UI is implemented
    choice = int(input("""
    Slect the type of exercise:
    1) Cardio
    2) Yoga
    3) Weights
    4) Sports/Recreation
    5) Walking
    
    Please enter a choice: """))
    exerciseTypes = {1: "Cardio", 2: "Yoga", 3: "Weights", 4: "Sports/Recreation", 5: "Walking"}   # Creates a Dictionary to relate choice to exercise
    
    # Get duration from user input
    try:
        duration = int(input(f"Please enter a minute amount for the duration of {exerciseTypes[choice]} completed: "))
    except ValueError:
        # FINISH ME: Add an error window
        print("Invalid Input. Please enter amount of minutes for duration")
        return

    # Get duration for entry
    if duration >= 30:
        goalAchieved = True
    else:
        goalAchieved = False

    # Get timestamp for entry
    timeStamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Create entry based off of data using a dictionary
    exerciseEntry = {
        "exerciseType": exerciseTypes[choice],
        "duration": duration,
        "goalAchieved": goalAchieved,
        "timeStamp": timeStamp
    }

    print(f"Good job! Exercise was logged: {exerciseEntry}")
# End of Track Exercise

def displayAnalyticsWindow():
    # FINISH ME:
    print("TEST: Analytics Window...")
    pass

#___William's_openMoodJournal()________________________________
# Zac: You might want to make it so that the data can be logged. All functionality will be
#  moved to buttons in Development Part 2. See trackExercise() for how to track data
def openMoodJournal():
    #FINISH ME:
    # still work in progress
    ent = input("Input a journal entry")
    if not ent:
        print("Input is empty")
    else:
        print("Journal entry saved successfully.")
#______________________________________________________________

def saveDailyProgress():
    # FINISH ME:
    print("TEST: Progress Saved!")
    pass

def logout():
    # FINISH ME:
    print("TEST: Logging out...")
    return False
#___Shabhan's__Logout()_________________________________
        if choice == '3':
            logout()
def logout():
    try:                                                                         
        with open(log_file, 'w') as f:                                 # write mode, which clears its contents
            pass                                                              # just clear the file
        print("Logged out successfully.")
    except IOError:
        print("Permission denied ")
    except Exception as e:
        print(f"Error : {e}")
    
#_______________________________________________________#

# main "function" basically
if __name__ == "__main__":
    doLogIn()
    displayDashboard()
